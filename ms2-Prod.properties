ms2.name=micoservice2
ms2.url=http://ms1:333/serviceA/greeting


# Whether the Eureka client is enabled (default: true)
eureka.client.enabled=true     
# Whether to register this application with Eureka (default: true)
eureka.client.registerWithEureka=true  
# Whether this client should fetch the registry information from Eureka server (default: true)
eureka.client.fetchRegistry=true     


# Eureka client configuration
#eureka.client.serviceUrl.defaultZone=http://localhost:8070/eureka/
eureka.client.serviceUrl.defaultZone=http://eurekaserver:8070/eureka/
#eureka.instance.hostname=localhost
eureka.instance.hostname=eurekaserver


eureka.instance.instance-id=eureka-server
#application prefers to use its IP address instead
# of its hostname when registering with the Eureka server
# and when other applications attempt to communicate with it.
eureka.instance.preferIpAddress=true

# app info configuration which will see it in the eureka dashboard
info.app.name=ms2
info.app.description=just demo micorservice connected with Eureka server 
info.app.version=1.0.0

# it allows you to shut down the application gracefully by
# sending an HTTP POST request to /shutdown.
# This endpoint is typically used for administrative purposes
# to safely terminate the application.
endpoint.shutdown.enable=true



#it ensures that the /shutdown endpoint is exposed through the Actuator framework.
management.endpoint.shutdown.enable=true

#circuitbreaker
#
## backendA is the name of circuitbreaker annotation in api

#enable check the circuitbreaker from actuator
resilience4j.circuitbreaker.instances.backendA.registerHealthIndicator=true

#check 5 request in order decide close or open status
resilience4j.circuitbreaker.instances.backendA.minimumNumberOfCalls=5

# from five check request above if 50% failed then set status open
resilience4j.circuitbreaker.instances.backendA.failureRateThreshold=50

# wait 30 sec in open stats then try to send a request to check if issue solved or not
resilience4j.circuitbreaker.instances.backendA.waitDurationInOpenState=30000

# in HalfOpenState try 2 request if not failed then go to close status
resilience4j.circuitbreaker.instances.backendA.permittedNumberOfCallsInHalfOpenState=10


# retry
Rresilience4j.retry.configs.default.registerHealthIndicator=true
Rresilience4j.retry.instances.backendA.maxAttempts=3
Rresilience4j.retry.instances.backendA.waitDuration=5000


#rate limiter
resilience4j.ratelimiter.configs.default.registerHealthIndicator=true
resilience4j.ratelimiter.instances.backendB.timeoutDuration=5000
resilience4j.ratelimiter.instances.backendB.limitRefreshPeriod=5000
resilience4j.ratelimiter.instances.backendB.limitForPeriod=1
